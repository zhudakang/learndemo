spring aop 注意事项：
如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP
如果目标对象实现了接口，也可以强制使用CGLIB实现AOP
如果目标对象没有实现接口，必须采用CGLIB的动态代理，spring会自动在两种模式之间转换
不管哪一种方式都不能用private和final做修饰词

链接：https://blog.csdn.net/weixin_38362455/article/details/91055939

一：
JDK动态代理只能对实现了接口的类生成代理，而不能针对类
CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）
二、Spring在选择用JDK还是CGLiB的依据：
   (1)当Bean实现接口时，Spring就会用JDK的动态代理
   (2)当Bean没有实现接口时，Spring使用CGlib是实现
　 (3)可以强制使用CGlib（在spring配置中加入<aop:aspectj-autoproxy proxy-target-class="true"/>）

三、CGlib比JDK快？
　 (1)使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。
      唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。
　 (2)在对JDK动态代理与CGlib动态代理的代码实验中看，1W次执行下，JDK7及8的动态代理性能比CGlib要好20%左右。

来自：https://www.cnblogs.com/bigmonkeys/p/7823268.html

但是：两者的效率也不一样，Cglib运行效率更高，但创建效率低。
对于jdk 7和jdk8之后，反而jdk各方面速度都很高。

怎么去用CGLIB
拦截器：MethodInterceptor接口，实现MethodInterceptor
MethodInterceptor接口方法 Object intercept(Object var1, Method var2, Object[] var3, MethodProxy var4);

Object为由CGLib动态生成的代理类实例，Method为上文中实体类所调用的被代理的方法引用，
Object[]为参数值列表，MethodProxy为生成的代理类对方法的代理引用。
字节码增强器：Java字节码增强指的是在Java字节码生成之后，对其进行修改，增强其功能，
这种方式相当于对应用程序的二进制文件进行修改。通过Enhancer类去实现。

