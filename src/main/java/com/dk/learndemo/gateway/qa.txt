Spring Cloud各个微服务之间为什么要用http交互？难道不慢吗？
Spring cloud的http从几个方面可以优化：1、换成okhttp3。
2、应用中不要做异步传输，防止异步等待，如果遇到异步场景，一定要利用好消息队列和缓存。
3、如果http1.1，有些场景利用keep-alive，减少连接损耗。4、可以考虑尝试HTTP/2。

目前很多大型项目多语言共存，http是最通用的协议，可以很好地解决跨语言跨平台兼容性。
比如Dubbo协议，无法简单地实现跨语言。

http交互只是协议比较重，但不会慢太多，追求单机极致性能的确可以考虑换协议。
目前微服务的一个重要理念就是水平扩展，慢这个问题通过业务设计还有多实例部署可以很好地提速。
重点水平扩展，慢这个问题可以通过业务涉及还有实例部署等很好的解决。

http协议很成熟，并且特点为大家所熟知：1.支持客户/服务器模式。2.简单快速。3.灵活。4.无连接。5.无状态。

而且这个Spring Cloud RPC可以优化的点不止可以关注于http协议，
例如替换原有的Jackson序列化为更快的或者更适合的序列化方式（例如fastJson，kryo），
还有http连接池替换实现等等，都会有可观的性能提升，而这些替换，
都有原生接口支持，接口的封装还有各种优化的完善考虑，Spring Cloud设计的都是很好的。

http慢在哪，不就多了几十字节的头吗，你自己设计协议顶多让头变成几个字节，
但这种差别你要看什么样的数据内容，如果交互的都是几个字节的实时控制数据，
http就嫌太重了，但一般都是几k到几十上百k的数据，几十个字节的头影响不大，除非追求极限性能

fastjson与jackson的区别
okhttp3？
http2？
http1.1？


token 与session？
session需要存放在服务器上浪费资源，而且session基于cookie，
对于app交互来说 就做不到权限

cookie是什么？
Cookie是存储在用户计算机上的小文件，
保存特定客户端和网站的适量数据，并可以由Web服务器或客户端浏览器访问，
允许服务器提供针对特定用户定制的页面，或者页面本身可以包含一些知道cookie中的数据的脚本。

1.HTTP2使用的是二进制传送，HTTP1.X是文本（字符串）传送。
大家都知道HTTP1.X使用的是明文的文本传送，而HTTP2使用的是二进制传送，二进制传送的单位是帧和流。帧组成了流，同时流还有流ID标示，通过流ID就牵扯出了第二个区别
2.HTTP2支持多路复用
因为有流ID，所以通过同一个http请求实现多个http请求传输变成了可能，可以通过流ID来标示究竟是哪个流从而定位到是哪个http请求
3.HTTP2头部压缩
HTTP2通过gzip和compress压缩头部然后再发送，同时客户端和服务器端同时维护一张头信息表，所有字段都记录在这张表中，这样后面每次传输只需要传输表里面的索引Id就行，通过索引ID就可以知道表头的值了
4.HTTP2支持服务器推送
HTTP2支持在客户端未经请求许可的情况下，主动向客户端推送内容
HTTP 协议是互联网的基础协议，也是网页开发的必备知识，最新版本 HTTP/2 更是让它成为技术热点。

