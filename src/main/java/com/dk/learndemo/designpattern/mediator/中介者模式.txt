中介者模式常常结合单例模式一块使用。(不让同事类持有中介者的属性)

在现实生活中，常常会出现好多对象之间存在复杂的交互关系，这种交互关系常常是“网状结构”，
它要求每个对象都必须知道它需要交互的对象。例如，每个人必须记住他（她）所有朋友的电话；
而且，朋友中如果有人的电话修改了，他（她）必须告诉其他所有的朋友修改，这叫作“牵一发而动全身”，非常复杂。

如果把这种“网状结构”改为“星形结构”的话，将大大降低它们之间的“耦合性”，
这时只要找一个“中介者”就可以了。如前面所说的“每个人必须记住所有朋友电话”的问题，
只要在网上建立一个每个朋友都可以访问的“通信录”就解决了。
你刚刚参力口工作想租房，可以找“房屋中介”；或者，自己刚刚到一个陌生城市找工作，可以找“人才交流中心”帮忙。

在软件的开发过程中，例如，在 MVC 框架中，控制器（C）就是模型（M）和视图（V）的中介者；
还有大家常用的 QQ 聊天程序的“中介者”是 QQ 服务器。所有这些，都可以采用“中介者模式”来实现，它将大大降低对象之间的耦合性，
提高系统的灵活性。

原来controller就是中介者~！！
这么来说转发项目的整体的设计思想意识一种中介模式，将客户的请求转发给算法端或者数据源，然后得到结果在进行返回。

对于网状机构和星状结构：
星状结构就是中间有个点，向外发散。
网状结构就是互相交叉

看了这么多设计模式，对为什么用设计模式，怎么用也有了一些思考。
降低对象之间的不必要的耦合，来达到方便后续修改的操作，而不会改动一下动了全身~

结构的模式：
中介者模式包含以下主要角色。
抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。
具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。
抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。
具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。

模式的更多应用场景：
当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时。
当想创建一个运行于多个类之间的对象，又不想生成新的子类时。
总归是想要让网状结构变得整洁，减少彼此的耦合。

在实际开发中，通常采用以下两种方法来简化中介者模式，使开发变得更简单。
不定义中介者接口，把具体中介者对象实现成为单例。
同事对象不持有中介者，而是在需要的时候直接获取中介者对象并调用。


