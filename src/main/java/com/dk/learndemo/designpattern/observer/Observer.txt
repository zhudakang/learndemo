-- 观察者模式
学习设计模式的过程要多加思考，在项目中什么样的需求可以用到这种设计模式。
另外还要知晓我们最常见的框架们，比如redis，mybatis，tomcat，mq 甚至jdk的一些原生中包含的设计模式。
观察者模式的定义：
指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。
可以称作发布订阅模式,redis中就有这订阅的功能。

首先弄懂哪个是目标？哪个是观察者？
比如拍卖中，拍卖的主持者观察这最高的标价，然后通知其他竞价者竞价。
观察者是负责观察对象状态是否变化，然后负责通知其他的对象相关事物。(但是依赖于被观察者通知它，或者被观察者有修改发布，那么所有订阅它的都应该得到通知)
目标是被观察的东西。

观察者模式是一种对象行为型模式，优点如下：
降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。
目标与观察者之间建立了一套触发机制。

缺点如下。
目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。(涉及到垃圾回收)
当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。
观察者没法知道观察的对象目标是怎么变化的，所以观察者只是知道了目标对象发生了变化。

使用的场景：
比如一个对象的改变会导致其他一到多个对象都改变，但是并不知道你具体多少个对象将要发生改变。所以可以降低对象之间的耦合度
一个对象必须通知其他对象，但是并不知道这些对象是谁。
如果包含一套触发的链，A改变会通知B，B改变会影响到C，所以可以使用观察者模式来实现触发的机制和规则。
一个对象的两个方面之间互相依赖，所以可以把这个两个方面封装到两个独立的对象里面，可以让他们独立的改变和复用。
又比如业务中，秒杀活动，某些按钮是有倒计时，在倒计时前是置灰色的，在倒计时结束之后，要通知好多秒杀按钮要变成预定/购买 按钮，包括上面的可选班次之类的也变成可点击状态。
这种场景也属于观察者模式。


TIPS:
代码不能够循环引用
如果是顺序执行，一个观察者的错误会导致系统卡住，所以用异步形式。
具体的目标对象和具体的观察者对象之间不能够直接调用，如果将两者关联起来，违反了面向对象的设计原则。

设计思想：
其实设计模式在业务中很少会有完全的规整的符合这种设计模式，一般都是多种结合。
单一观察者的设计思想：
被观察者接口 ： 可以有创建和摧毁具体的观察对象，也可以有通知方法。
具体的被观察的对象： 实现观察者接口
观察者接口： 定义一个update方法
具体观察者： 维护一个对具体被观察者的引用。 被观察者对象变化的时候，会调用update() 通知所有相关的观察者更新
在被观察者类里面需要有一个集合维护所有的观察者。

下面通过代码理解相关内容。




