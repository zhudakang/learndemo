因为设计模式中，很多时候都用的是抽象类。
但是实际在业务中，很少会用到抽象类。
所以在这里整理一下这两个的区别与联系，和到底什么业务场景会使用到抽象类。

一般来说 事物的特征，强调特征的时候，需要定义成接口。
但是一般是一种没有具体概念的，一般定义成抽象类(并不是具体特征，而是抽象出来的事物)。
更哲学的说法：
抽象类是对类的抽象，然而接口是对行为/特征的抽象。
抽象类是从子类中发现了公共的东西，泛化出来父类，然后子类继承父类，
但是接口是不知道子类的存在的，方法如何实现还不确定，预先定义。
从动机上面来说：
使用抽象类是为了代码的复用，而使用接口的动机是为了实现多态性。

所谓的面向对象：
感觉面向对象其实就是把代码上的东西当做实体来理解，实体有本身的属性和行为。
比如数据库操作，把数据库当做一个对象，行为是可以增删改查，所以声明一个类去操作这些东西。

总结:
通俗移动的说,
当描述一组方法的时候使用接口,当描述一个虚拟的物体的时候使用抽象类

抽象类与接口的区别：https://www.cnblogs.com/c-bourne/p/9990095.html
但是java8中 接口有一定的更改~

注意的点：
抽象类不可以有private修饰符,因为private无法被继承。
抽象类可以有默认的方法实现，接口现在在java8里面也有了默认方法，使用default来修饰。
他们都需要实现接口中所有生命的方法。
抽象类可以再继承抽象类
抽象类除了不能被实例化之外，其他的与普通的java类没有任何区别.
接口的方法必须是public的，接口中不能定义变量。所有的都是常量。
接口中不能有main方法。
接口可以去继承一个或者多个其他接口。(这个很重要)
抽象类比接口执行起来速度快，因为接口需要花时间去寻找在类中实现的方法。
如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。 (不定义成抽象的方法)
接口中也可以实现默认方法~


public interface IntegerCase extends Interface1, Interface2 {
//这样写是正确的
}